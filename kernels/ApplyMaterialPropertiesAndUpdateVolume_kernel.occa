#include<kernels/kernelDefines.occa>

occaDeviceFunction
void ApplyMaterialPropertiesForElems_device(const Real_t eosvmin,
					    const Real_t eosvmax,
					    const occaPointer Real_t *vnew,
					    occaPointer Real_t *v,
					    Real_t *vnewc,
					    occaPointer Index_t* bad_vol,
					    const Index_t i,
					    const Index_t zn);

occaDeviceFunction
void ApplyMaterialPropertiesForElems_device(const Real_t eosvmin,
					    const Real_t eosvmax,
					    const occaPointer Real_t *vnew,
					    occaPointer Real_t *v,
					    Real_t *vnewc,
					    occaPointer Index_t* bad_vol,
					    const Index_t i,
					    const Index_t zn){

  *vnewc = vnew[zn] ;

  if (eosvmin != ((Real_t)0.)) {
    if (*vnewc < eosvmin)
      *vnewc = eosvmin ;
  }

  if (eosvmax != ((Real_t)0.)) {
    if (*vnewc > eosvmax)
      *vnewc = eosvmax ;
  }

  // Now check for valid volume
  Real_t vc = v[zn];
  if (eosvmin != ((Real_t)0.)) {
    if (vc < eosvmin)
      vc = eosvmin ;
  }
  if (eosvmax != ((Real_t)0.)) {
    if (vc > eosvmax)
      vc = eosvmax ;
  }
  if (vc <= 0.) {
    bad_vol[0] = i;
  }

}


occaDeviceFunction
void CalcSoundSpeedForElems_device(const Real_t vnewc,
				   const Real_t rho0,
				   const Real_t enewc,
				   const Real_t pnewc,
				   const Real_t pbvc,
				   const Real_t bvc,
				   const Real_t ss4o3,
				   const Index_t nz,
				   occaPointer Real_t *ss,
				   const Index_t i,
				   const Index_t iz);

occaDeviceFunction
void CalcSoundSpeedForElems_device(const Real_t vnewc,
				   const Real_t rho0,
				   const Real_t enewc,
				   const Real_t pnewc,
				   const Real_t pbvc,
				   const Real_t bvc,
				   const Real_t ss4o3,
				   const Index_t nz,
				   occaPointer Real_t *ss,
				   const Index_t i,
				   const Index_t iz){

  Real_t ssTmp = ( pbvc * enewc + vnewc * vnewc *
		   bvc * pnewc) / rho0;

  if (ssTmp <= ((Real_t)1.111111e-36)) {
    ssTmp = ((Real_t)1.111111e-36);
  }
  else {
    ssTmp = SQRT(ssTmp) ;
  }
  ss[iz] = ssTmp;
}

occaDeviceFunction
void CalcPressureForElems_device(Real_t *p_new,
				 Real_t *bvc,
				 Real_t *pbvc,
				 const Real_t e_old,
				 const Real_t compression,
				 const Real_t vnewc,
				 const Real_t pmin,
				 const Real_t p_cut,
				 const Real_t eosvmax);

occaDeviceFunction
void CalcPressureForElems_device(Real_t *p_new,
				 Real_t *bvc,
				 Real_t *pbvc,
				 const Real_t e_old,
				 const Real_t compression,
				 const Real_t vnewc,
				 const Real_t pmin,
				 const Real_t p_cut,
				 const Real_t eosvmax){

  Real_t c1s = ((Real_t)2.0)/((Real_t)3.0);
  Real_t p_temp = *p_new;

  *bvc = c1s * (compression + ((Real_t)1.));
  *pbvc = c1s;

  p_temp = (*bvc) * e_old;

  if ( FABS(p_temp) <  p_cut )
    p_temp = ((Real_t)0.0) ;

  if ( vnewc >= eosvmax ) /* impossible condition here? */
    p_temp = ((Real_t)0.0) ;

  if (p_temp < pmin)
    p_temp = pmin ;

  *p_new = p_temp;

}

occaDeviceFunction
void UpdateVolumesForElems_device(const Index_t numElem,
				  const Real_t v_cut,
                                  const occaPointer Real_t *vnew,
                                  occaPointer Real_t *v,
                                  const Index_t i);

occaDeviceFunction
void UpdateVolumesForElems_device(const Index_t numElem,
				  const Real_t v_cut,
                                  const occaPointer Real_t *vnew,
                                  occaPointer Real_t *v,
                                  const Index_t i){
  Real_t tmpV ;
  tmpV = vnew[i] ;

  if ( FABS(tmpV - ((Real_t)1.0)) < v_cut )
    tmpV = ((Real_t)1.0) ;
  v[i] = tmpV ;
}


occaDeviceFunction
void CalcEnergyForElems_device(Real_t *p_new,
			       Real_t *e_new,
			       Real_t *q_new,
			       Real_t *bvc,
			       Real_t *pbvc,
			       const Real_t p_old,
			       const Real_t e_old,
			       const Real_t q_old,
			       const Real_t compression,
			       const Real_t compHalfStep,
			       const Real_t vnewc,
			       const Real_t work,
			       const Real_t delvc,
			       const Real_t pmin,
			       const Real_t p_cut,
			       const Real_t e_cut,
			       const Real_t q_cut,
			       const Real_t emin,
			       const Real_t qq,
			       const Real_t ql,
			       const Real_t rho0,
			       const Real_t eosvmax,
			       const Index_t length);

occaDeviceFunction
void CalcEnergyForElems_device(Real_t *p_new,
			       Real_t *e_new,
			       Real_t *q_new,
			       Real_t *bvc,
			       Real_t *pbvc,
			       const Real_t p_old,
			       const Real_t e_old,
			       const Real_t q_old,
			       const Real_t compression,
			       const Real_t compHalfStep,
			       const Real_t vnewc,
			       const Real_t work,
			       const Real_t delvc,
			       const Real_t pmin,
			       const Real_t p_cut,
			       const Real_t e_cut,
			       const Real_t q_cut,
			       const Real_t emin,
			       const Real_t qq,
			       const Real_t ql,
			       const Real_t rho0,
			       const Real_t eosvmax,
			       const Index_t length){

  const Real_t sixth = ((Real_t)1.0) / ((Real_t)6.0) ;
  Real_t pHalfStep;

  *e_new = e_old - ((Real_t)0.5) * delvc * (p_old + q_old)
    + ((Real_t)0.5) * work;

  if (*e_new  < emin ) {
    *e_new = emin ;
  }

  CalcPressureForElems_device(&pHalfStep, bvc, pbvc,
			      *e_new, compHalfStep, vnewc,
			      pmin, p_cut, eosvmax);

  Real_t vhalf = ((Real_t)1.) / (((Real_t)1.) + compHalfStep) ;

  if ( delvc > ((Real_t)0.) ) {
    *q_new /* = qq = ql */ = ((Real_t)0.) ;
  }
  else {
    Real_t ssc = ( (*pbvc) * (*e_new)
		   + vhalf * vhalf * (*bvc) * pHalfStep ) / rho0 ;

    if ( ssc <= ((Real_t)0.) ) {
      ssc =((Real_t).333333e-36) ;
    } else {
      ssc = SQRT(ssc) ;
    }

    *q_new = (ssc*ql + qq) ;
  }

  (*e_new) = (*e_new) + ((Real_t)0.5) * delvc
    * (  ((Real_t)3.0)*(p_old     + q_old)
	 - ((Real_t)4.0)*(pHalfStep + (*q_new))) ;

  (*e_new) += ((Real_t)0.5) * work;

  if (FABS(*e_new) < e_cut) {
    *e_new = ((Real_t)0.)  ;
  }
  if ( *e_new  < emin ) {
    *e_new = emin ;
  }

  CalcPressureForElems_device(p_new, bvc, pbvc,
			      *e_new, compression, vnewc,
			      pmin, p_cut, eosvmax);

  Real_t q_tilde ;

  if (delvc > ((Real_t)0.)) {
    q_tilde = ((Real_t)0.) ;
  }
  else {
    Real_t ssc = ( (*pbvc) * (*e_new)
		   + vnewc * vnewc * (*bvc) * (*p_new) ) / rho0 ;

    if ( ssc <= ((Real_t)0.) ) {
      ssc = ((Real_t).333333e-36) ;
    } else {
      ssc = SQRT(ssc) ;
    }

    q_tilde = (ssc*ql + qq) ;
  }

  (*e_new) = (*e_new) - (  ((Real_t)7.0)*(p_old     + q_old)
			   - ((Real_t)8.0)*(pHalfStep + (*q_new))
			   + ((*p_new) + q_tilde)) * delvc*sixth ;

  if (FABS(*e_new) < e_cut) {
    (*e_new) = ((Real_t)0.)  ;
  }
  if ( (*e_new)  < emin ) {
    *e_new = emin ;
  }

  CalcPressureForElems_device(p_new, bvc, pbvc,
			      *e_new, compression, vnewc,
			      pmin, p_cut, eosvmax);


  if ( delvc <= ((Real_t)0.) ) {
    Real_t ssc = ( (*pbvc) * (*e_new)
		   + vnewc * vnewc * (*bvc) * (*p_new) ) / rho0 ;

    if ( ssc <= ((Real_t)0.) ) {
      ssc = ((Real_t).333333e-36) ;
    } else {
      ssc = SQRT(ssc) ;
    }

    *q_new = (ssc*ql + qq) ;

    if (FABS(*q_new) < q_cut) *q_new = ((Real_t)0.) ;
  }

  //  return ;
}


occaKernel void
ApplyMaterialPropertiesAndUpdateVolume_kernel(occaKernelInfoArg,
					      const Index_t occaVariable length,
					      const Real_t occaVariable rho0,
					      const Real_t occaVariable e_cut,
					      const Real_t occaVariable emin,
					      occaPointer Real_t* ql,
					      occaPointer Real_t* qq,
					      occaPointer Real_t* vnew,
					      occaPointer Real_t* v,
					      const Real_t occaVariable pmin,
					      const Real_t occaVariable p_cut,
					      const Real_t occaVariable q_cut,
					      const Real_t occaVariable eosvmin,
					      const Real_t occaVariable eosvmax,
					      occaPointer Index_t* matElemlist,
					      occaPointer Real_t* e,
					      occaPointer Real_t* delv,
					      occaPointer Real_t* p,
					      occaPointer Real_t* q,
					      const Real_t occaVariable ss4o3,
					      occaPointer Real_t* ss,
					      const Real_t occaVariable v_cut,
					      occaPointer Index_t* bad_vol){

  occaGlobalFor0{

    Real_t e_old, delvc, p_old, q_old;
    Real_t compression, compHalfStep;
    Real_t qq_old, ql_old, work;
    Real_t p_new, e_new, q_new;
    Real_t bvc, pbvc, vnewc;

    // Index_t i=blockDim.x*blockIdx.x + threadIdx.x;
    Index_t i=occaGlobalId0;

    if (i<length) {

      Index_t zidx  = matElemlist[i] ;

      ApplyMaterialPropertiesForElems_device
    	(eosvmin,eosvmax,vnew,v,&vnewc,bad_vol,i,zidx);

      e_old = e[zidx];
      delvc = delv[zidx];
      p_old = p[zidx];
      q_old = q[zidx];

      Real_t vchalf ;
      compression = ((Real_t)1.) / vnewc - ((Real_t)1.);
      vchalf = vnewc - delvc * ((Real_t).5);
      compHalfStep = ((Real_t)1.) / vchalf - ((Real_t)1.);

      if ( eosvmin != ((Real_t)0.) ) {
    	if (vnewc <= eosvmin) { /* impossible due to calling func? */
    	  compHalfStep = compression ;
    	}
      }
      if ( eosvmax != ((Real_t)0.) ) {
    	if (vnewc >= eosvmax) { /* impossible due to calling func? */
    	  p_old        = ((Real_t)0.) ;
    	  compression  = ((Real_t)0.) ;
    	  compHalfStep = ((Real_t)0.) ;
    	}
      }

      qq_old = qq[zidx] ;
      ql_old = ql[zidx] ;
      work = ((Real_t)0.) ;

      CalcEnergyForElems_device(&p_new, &e_new, &q_new, &bvc, &pbvc,
    				p_old, e_old,  q_old, compression, compHalfStep,
    				vnewc, work,  delvc, pmin,
    				p_cut, e_cut, q_cut, emin,
    				qq_old, ql_old, rho0, eosvmax, length);

      p[zidx] = p_new ;
      e[zidx] = e_new ;
      q[zidx] = q_new ;

      CalcSoundSpeedForElems_device
    	(vnewc,rho0,e_new,p_new,pbvc,bvc,ss4o3,length,ss,i,zidx);

      UpdateVolumesForElems_device(length,v_cut,vnew,v,i);

    }
  }
}
